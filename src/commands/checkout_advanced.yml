description: >
  Provides git shallow clone instead of full clone.
  This command is for advaned usage when you need options for clone, fetch and tag fetch.
  eval is used in step and Fish shell is not supported.
parameters:
  clone_options:
    type: string
    default: "--depth 1"
    description: >
      git clone options you want to add such as '--depth 1 --verbose' and '--depth 1 --shallow-since "5 days ago"'
  fetch_options:
    type: string
    default: "--depth 10"
    description: >
      git fetch options you want to add such as '--depth 1 --verbose' and '--depth 1 --shallow-since "5 days ago"'
      you don't need set '--force' option as it already set by default.
      in case of tag, add '--no-tags' on this option and tag_fetch_options.
  tag_fetch_options:
    type: string
    default: "--tags"
    description: >
      This option apply when git operation is tag. Use 'fetch_options' instead if pr and other git operation.
      Additional git fetch options you want to add specifically for tags such as '--tags' or '--no-tags'.
      Default value is '--tags'
  keyscan_github:
    description: >
      Pass `true` to dynamically get ssh-rsa from `github.com`.
    type: boolean
    default: false
  keyscan_bitbucket:
    description: >
      Pass `true` to dynamically get ssh-rsa from `bitbucket.org`.
    type: boolean
    default: false
  path:
    description: >
      Checkout directory (default: `~/project`)
    type: string
    default: .
steps:
  - run:
      name: Checkout code shallow
      command: |
        #!/bin/sh
        set -ex

        # Workaround old docker images with incorrect $HOME
        # check https://github.com/docker/docker/issues/2968 for details
        if [ "${HOME}" = "/" ]; then
          export HOME=$(getent passwd $(id -un) | cut -d: -f6)
        fi

        # known_hosts / id_rsa
        export SSH_CONFIG_DIR=${SSH_CONFIG_DIR:-"${HOME}/.ssh"}
        echo "Using SSH Config Dir '$SSH_CONFIG_DIR'"
        git --version

        mkdir -p "$SSH_CONFIG_DIR"
        chmod 0700 "$SSH_CONFIG_DIR"

        if [ -x "$(command -v ssh-keyscan)" ] && ([ "<< parameters.keyscan_github >>" == "true" ] || [ "<< parameters.keyscan_bitbucket >>" == "true" ]); then
          if [ "<< parameters.keyscan_github >>" == "true" ]; then
            ssh-keyscan -H github.com >> "$SSH_CONFIG_DIR/known_hosts"
          fi
          if [ "<< parameters.keyscan_bitbucket >>" == "true" ]; then
            ssh-keyscan -H bitbucket.org >> "$SSH_CONFIG_DIR/known_hosts"
          fi
        fi

        if [ "<< parameters.keyscan_github >>" != "true" ]; then
          echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        ' >> "$SSH_CONFIG_DIR/known_hosts"
        fi

        if [ "<< parameters.keyscan_bitbucket >>" != "true" ]; then
          echo 'bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
        ' >> "$SSH_CONFIG_DIR/known_hosts"
        fi
        chmod 0600 "$SSH_CONFIG_DIR/known_hosts"

        rm -f "$SSH_CONFIG_DIR/id_rsa"
        (umask 077; touch "$SSH_CONFIG_DIR/id_rsa")
        printf "%s" "$CHECKOUT_KEY" > "$SSH_CONFIG_DIR/id_rsa"
        chmod 0600 "$SSH_CONFIG_DIR/id_rsa"
        if (: "${CHECKOUT_KEY_PUBLIC?}") 2>/dev/null; then
          rm -f "$SSH_CONFIG_DIR/id_rsa.pub"
          printf "%s" "$CHECKOUT_KEY_PUBLIC" > "$SSH_CONFIG_DIR/id_rsa.pub"
        fi

        # use git+ssh instead of https
        git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
        git config --global gc.auto 0 || true

        # checkout
        git clone << parameters.clone_options >> $CIRCLE_REPOSITORY_URL "<< parameters.path >>"
        cd "<< parameters.path >>"

        # Fetch remote and check the commit ID of the checked out code (sh version of bash `elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]`)
        if [ -n "$CIRCLE_TAG" ]; then
          # tag
          git fetch << parameters.tag_fetch_options >> << parameters.fetch_options >> --force origin "+refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
        elif [[ $(echo $CIRCLE_BRANCH | grep -E ^pull\/[0-9]+$) ]]; then
          git fetch << parameters.fetch_options >> --force origin "${CIRCLE_BRANCH}/head:remotes/origin/${CIRCLE_BRANCH}"
        else
          # others
          git fetch << parameters.fetch_options >> --force origin "${CIRCLE_BRANCH}:remotes/origin/${CIRCLE_BRANCH}"
        fi

        # Check the commit ID of the checked out code
        if [ -n "$CIRCLE_TAG" ]; then
          echo 'Checking out tag'
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
        elif [ -n "$CIRCLE_BRANCH" ] && [ "$CIRCLE_BRANCH" != 'HEAD' ]; then
          echo 'Checking out branch'
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
        fi

        git reset --hard "$CIRCLE_SHA1"
