description: >
  Provides git shallow clone instead of full clone.
  This command is for simple usage when you don't need options for clone, fetch and tag fetch.
parameters:
  depth:
    description: >
      Limit fetch depth to the specified number of commit from a remote branch history.
      Refer git fetch documentation for more information.
    type: integer
    default: 1
  fetch_depth:
    description: >
      Addtional fetch depth to the specified number of commit from a remote branch history.
      Pass more number then depth when you want to check futher commit history.
    type: integer
    default: 10
  no_tags:
    description: >
      true to add '--no-tags' when fetching.
      As git not offer tag depth, we only able to control fetch all tags or not.
      This enable you to stop fetch tags when you have vast numbers of tags during specified fetch depth.
      In other word, if you need tag then fetch specified tags manually when use 'without_tag: true'.
    type: boolean
    default: false
  keyscan_github:
    description: >
      Pass `true` to dynamically get ssh-rsa from `github.com`.
    type: boolean
    default: false
  keyscan_bitbucket:
    description: >
      Pass `true` to dynamically get ssh-rsa from `bitbucket.org`.
    type: boolean
    default: false
  path:
    description: >
      Checkout directory (default: `~/project`)
    type: string
    default: .
steps:
  - run:
      name: Checkout code shallow
      command: |
        #!/bin/sh
        set -ex

        # Workaround old docker images with incorrect $HOME
        # check https://github.com/docker/docker/issues/2968 for details
        if [ "${HOME}" = "/" ]; then
          export HOME=$(getent passwd $(id -un) | cut -d: -f6)
        fi

        # known_hosts / id_rsa
        export SSH_CONFIG_DIR=${SSH_CONFIG_DIR:-"${HOME}/.ssh"}
        echo "Using SSH Config Dir '$SSH_CONFIG_DIR'"
        git --version

        mkdir -p "$SSH_CONFIG_DIR"
        chmod 0700 "$SSH_CONFIG_DIR"

        if [ -x "$(command -v ssh-keyscan)" ] && ([ "<< parameters.keyscan_github >>" == "true" ] || [ "<< parameters.keyscan_bitbucket >>" == "true" ]); then
          if [ "<< parameters.keyscan_github >>" == "true" ]; then
            ssh-keyscan -H github.com >> "$SSH_CONFIG_DIR/known_hosts"
          fi
          if [ "<< parameters.keyscan_bitbucket >>" == "true" ]; then
            ssh-keyscan -H bitbucket.org >> "$SSH_CONFIG_DIR/known_hosts"
          fi
        fi

        if [ "<< parameters.keyscan_github >>" != "true" ]; then
          echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
        ' >> "$SSH_CONFIG_DIR/known_hosts"
        fi

        if [ "<< parameters.keyscan_bitbucket >>" != "true" ]; then
          echo 'bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
        ' >> "$SSH_CONFIG_DIR/known_hosts"
        fi
        chmod 0600 "$SSH_CONFIG_DIR/known_hosts"

        rm -f "$SSH_CONFIG_DIR/id_rsa"
        (umask 077; touch "$SSH_CONFIG_DIR/id_rsa")
        printf "%s" "$CHECKOUT_KEY" > "$SSH_CONFIG_DIR/id_rsa"
        chmod 0600 "$SSH_CONFIG_DIR/id_rsa"
        if (: "${CHECKOUT_KEY_PUBLIC?}") 2>/dev/null; then
          rm -f "$SSH_CONFIG_DIR/id_rsa.pub"
          printf "%s" "$CHECKOUT_KEY_PUBLIC" > "$SSH_CONFIG_DIR/id_rsa.pub"
        fi

        export GIT_SSH_COMMAND='ssh -i "$SSH_CONFIG_DIR/id_rsa" -o UserKnownHostsFile="$SSH_CONFIG_DIR/known_hosts"'

        # use git+ssh instead of https
        git config --global url."ssh://git@github.com".insteadOf "https://github.com" || true
        git config --global gc.auto 0 || true

        # Define Tag args
        if [ -n "$CIRCLE_TAG" ]; then
          # only tags operation have default --tags. others will no tag options
          clone_tag_args=
          fetch_tag_args="--tags"
        fi
        if [ '<< parameters.no_tags >>' == 'true' ]; then
          clone_tag_args="--no-tags"
          fetch_tag_args="--no-tags"
        fi

        # checkout
        git clone ${clone_tag_args} --depth << parameters.depth >> $CIRCLE_REPOSITORY_URL "<< parameters.path >>"
        cd "<< parameters.path >>"

        # Fetch remote and check the commit ID of the checked out code (sh version of bash `elif [[ "$CIRCLE_BRANCH" =~ ^pull\/* ]]`)
        if [ -n "$CIRCLE_TAG" ]; then
          # tag
          git fetch ${fetch_tag_args} --depth << parameters.fetch_depth >> --force origin "+refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
        elif [[ $(echo $CIRCLE_BRANCH | grep -E ^pull\/[0-9]+$) ]]; then
          # pull request
          git fetch ${fetch_tag_args} --depth << parameters.fetch_depth >> --force origin "${CIRCLE_BRANCH}/head:remotes/origin/${CIRCLE_BRANCH}"
        else
          # others
          git fetch ${fetch_tag_args} --depth=<< parameters.fetch_depth >> --force origin "$CIRCLE_BRANCH:remotes/origin/$CIRCLE_BRANCH"
        fi

        # Check the commit ID of the checked out code
        if [ -n "$CIRCLE_TAG" ]; then
          echo 'Checking out tag'
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q "$CIRCLE_TAG"
        elif [ -n "$CIRCLE_BRANCH" ] && [ "$CIRCLE_BRANCH" != 'HEAD' ]; then
          echo 'Checking out branch'
          git reset --hard "$CIRCLE_SHA1"
          git checkout -q -B "$CIRCLE_BRANCH"
        fi

        git reset --hard "$CIRCLE_SHA1"
